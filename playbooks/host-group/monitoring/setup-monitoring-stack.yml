---
- name: Install and Configure Monitoring Stack (Prometheus, Grafana)
  hosts: pi-monitor
  become: true
  vars_files:
    - ~/ansible-secrets/github_token.yml
    - ~/ansible-secrets/grafana_password.yml
  vars:
    prometheus_repo: "prometheus/prometheus"
    grafana_repo: "grafana/grafana"

  tasks:
    - name: Get the latest versions of Prometheus and Grafana
      uri:
        url: "https://api.github.com/repos/{{ item }}/releases/latest"
        method: GET
        headers:
          Authorization: "token {{ vault_github_token }}"
        return_content: yes
      loop:
        - "{{ prometheus_repo }}"
        - "{{ grafana_repo }}"
      register: github_releases

    - name: Set Prometheus and Grafana version facts
      set_fact:
        prometheus_version: "{{ github_releases.results[0].json.tag_name | regex_replace('^v', '') }}"
        grafana_version: "{{ github_releases.results[1].json.tag_name | regex_replace('^v', '') }}"

    ### PROMETHEUS SETUP ###
    - name: Check installed Prometheus version
      command: "/usr/local/bin/prometheus --version"
      register: installed_prometheus_version
      ignore_errors: yes
      changed_when: false

    - name: Extract installed Prometheus version
      set_fact:
        installed_prometheus: "{{ installed_prometheus_version.stdout_lines[0] | regex_search('version ([^ ]+)', '\\1') | first }}"
      when: installed_prometheus_version.stdout_lines is defined
      ignore_errors: yes

    - name: Determine if Prometheus update is needed
      set_fact:
        prometheus_update_needed: "{{ installed_prometheus is not defined or installed_prometheus != prometheus_version }}"

    - name: Download and install Prometheus if outdated or missing
      shell: |
        cd /tmp
        curl -LO https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-arm64.tar.gz
        tar -xzf prometheus-{{ prometheus_version }}.linux-arm64.tar.gz
        sudo mv prometheus-{{ prometheus_version }}.linux-arm64/prometheus /usr/local/bin/
        sudo mv prometheus-{{ prometheus_version }}.linux-arm64/promtool /usr/local/bin/
        sudo mkdir -p /etc/prometheus /var/lib/prometheus
      when: prometheus_update_needed

    - name: Deploy Prometheus configuration
      copy:
        src: files/prometheus.yml
        dest: /etc/prometheus/prometheus.yml
        owner: root
        group: root
        mode: '0644'
      notify: Restart Prometheus

    - name: Deploy Prometheus systemd service
      copy:
        src: files/prometheus.service
        dest: /etc/systemd/system/prometheus.service
        owner: root
        group: root
        mode: '0644'
      notify: Restart Prometheus

    - name: Enable and start Prometheus
      systemd:
        name: prometheus
        enabled: yes
        state: started

    ### GRAFANA SETUP ###
    - name: Check installed Grafana version
      command: "grafana-server -v"
      register: installed_grafana_version
      ignore_errors: yes
      changed_when: false

    - name: Extract installed Grafana version
      set_fact:
        installed_grafana: >-
          {% set match = installed_grafana_version.stdout | regex_search('v([\\d\\.]+)', '\\1') %}
          {{ match if match is not none else None }}
      when: installed_grafana_version.stdout is defined
      ignore_errors: yes

    - name: Determine if Grafana update is needed
      set_fact:
        grafana_update_needed: "{{ installed_grafana is not defined or installed_grafana != grafana_version }}"

    - name: Download and install Grafana if outdated or missing
      shell: |
        cd /tmp
        curl -LO https://dl.grafana.com/oss/release/grafana-{{ grafana_version }}.linux-arm64.tar.gz
        tar -xzf grafana-{{ grafana_version }}.linux-arm64.tar.gz
        sudo cp -r grafana-{{ grafana_version }}/bin/* /usr/local/bin/
        sudo mkdir -p /etc/grafana /var/lib/grafana
      when: grafana_update_needed

    - name: Deploy Prometheus data source for Grafana
      copy:
        src: files/prometheus-grafana-datasource.yml
        dest: /etc/grafana/provisioning/datasources/prometheus.yml
        owner: root
        group: root
        mode: '0644'
      notify: Restart Grafana

    - name: Deploy Grafana systemd service
      copy:
        src: files/grafana.service
        dest: /etc/systemd/system/grafana.service
        owner: root
        group: root
        mode: '0644'
      notify: Restart Grafana

    - name: Enable and start Grafana
      systemd:
        name: grafana
        enabled: yes
        state: started

    - name: Create Grafana provisioning directory
      file:
        path: /etc/grafana/provisioning/dashboards
        state: directory
        recurse: yes

    - name: Copy Node Exporter dashboard JSON from control node
      copy:
        src: files/node-exporter.json
        dest: /etc/grafana/provisioning/dashboards/node-exporter.json
        owner: root
        group: root
        mode: '0644'
  
    - name: Deploy Grafana configuration from template
      template:
        src: templates/grafana.ini.j2
        dest: /etc/grafana/grafana.ini
        owner: root
        group: root
        mode: '0644'
      notify: Restart Grafana

  handlers:
    - name: Restart Prometheus
      systemd:
        name: prometheus
        state: restarted
        daemon_reload: true

    - name: Restart Grafana
      systemd:
        name: grafana
        state: restarted
        daemon_reload: true
