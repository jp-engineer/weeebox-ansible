---
- name: Setup Router Backup on pi-monitor
  hosts: pi-monitor
  become: true
  vars_files:
    - /home/jack/ansible-secrets/router_password.yml  # Load router password from Vault

  tasks:
    - name: Install necessary packages
      apt:
        name:
          - util-linux
          - sshpass
        state: present
        update_cache: yes

    - name: Find the closest 32GB USB device
      shell: |
        lsblk -rno NAME,SIZE,TYPE,MOUNTPOINT | awk '$3=="disk" && $2 ~ /G/ {print $1, $2}' | sort -k2 -n | head -n 1 | awk '{print "/dev/"$1}'
      register: usb_device
      changed_when: false

    - name: Find the closest 32GB USB partition
      shell: |
        lsblk -rno NAME,SIZE,TYPE,MOUNTPOINT | awk '$3=="part" && $2 ~ /G/ {print $1, $2}' | sort -k2 -n | head -n 1 | awk '{print "/dev/"$1}'
      register: usb_device
      changed_when: false

    - name: Create mount point for USB drive
      file:
        path: /mnt/router-backup
        state: directory
        mode: '0755'

    - name: Add USB drive to /etc/fstab for automatic mounting
      lineinfile:
        path: /etc/fstab
        line: "{{ usb_device.stdout }} /mnt/router-backup ext4 defaults,nofail 0 2"
        create: yes
        state: present

    - name: Mount the USB drive
      command: mount -a
      register: mount_result
      changed_when: "'mounted' in mount_result.stdout"

    - name: Deploy `router_backup.sh` from Ansible repo
      copy:
        src: files/router_backup.sh  # Script stored in the Ansible repo
        dest: /usr/local/bin/router_backup.sh
        owner: root
        group: root
        mode: '0755'

    - name: Replace placeholders in router_backup.sh
      replace:
        path: /usr/local/bin/router_backup.sh
        regexp: "USB_DEVICE_PLACEHOLDER"
        replace: "{{ usb_device.stdout }}"

    - name: Create systemd service for router backups
      copy:
        dest: /etc/systemd/system/router-backup.service
        content: |
          [Unit]
          Description=Router Backup Service
          After=network.target

          [Service]
          Type=oneshot
          Environment="USB_DEVICE={{ usb_device.stdout }}"
          ExecStart=/usr/local/bin/router_backup.sh
          User=root
          Group=root
          StandardOutput=journal
          StandardError=journal

          [Install]
          WantedBy=multi-user.target

    - name: Enable and start router-backup service
      systemd:
        name: router-backup
        enabled: yes
        state: started

    - name: Create cron job to run the script at 3:00 AM on Sundays
      cron:
        name: "Run router backup"
        minute: "0"
        hour: "3"
        weekday: "0"
        job: "USB_DEVICE={{ usb_device.stdout }} /usr/local/bin/router_backup.sh >> /var/log/router_backup.log 2>&1"

    - name: Test run `router_backup.sh`
      command: /usr/local/bin/router_backup.sh
      environment:
        USB_DEVICE: "{{ usb_device.stdout }}"
      register: script_result
      changed_when: false

    - name: Display test run output
      debug:
        msg: "{{ script_result.stdout }}"
